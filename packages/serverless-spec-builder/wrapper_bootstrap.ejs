const { BootstrapStarter } = require('@midwayjs/bootstrap');
const { Framework } = require('<%=faasModName %>');
const { asyncWrapper, start } = require('<%=starter %>');
const { match } = require('path-to-regexp');
const layers = [];
<% layerDeps.forEach(function(layer){ %>
try {
  const <%=layer.name%> = require('<%=layer.path%>');
  layers.push(<%=layer.name%>);
} catch(e) { }
<% }); %>

let starter;
let runtime;
let inited = false;

const initializeMethod = async (initializeContext = {}) => {
  layers.unshift(engine => {
    engine.addRuntimeExtension({
      async beforeFunctionStart(runtime) {
        starter = new Framework();
        starter.configure({
          initializeContext,
          preloadModules: <%-JSON.stringify(preloadModules, null, 2)%>,
          applicationAdapter: runtime
        });
        const boot = new BootstrapStarter();
        boot.configure({
          appDir: __dirname,
        }).load(starter);

        await boot.init();
        await boot.run();
      }
    });
  })
  runtime = await start({
    layers: layers,
    initContext: initializeContext,
  });

  inited = true;
};

const getHandler = (hanlderName, ...originArgs) => {
  <% handlers.forEach(function(handlerData){ %>
    if (hanlderName === '<%=handlerData.name%>') {
      return <% if (handlerData.handler) {
      %> starter.handleInvokeWrapper('<%=handlerData.handler%>'); <% } else {
      %> async (ctx) => {
        const allHandlers = <%-JSON.stringify(handlerData.handlers, null, 2)%>;
        let handler = null;
        let ctxPath = ctx && ctx.path || '';
        let matchRes;
        if (ctxPath) {
          handler = allHandlers.find(handler => {
            matchRes = match(handler.regRouter)(ctxPath);
            return matchRes;
          });
        }

        if (handler) {
          if (matchRes && matchRes.params) {
            const req = originArgs && originArgs[0];
            if (req) {
              req.pathParameters = Object.assign({}, matchRes.params, req.pathParameters);
            }
          }
          return starter.handleInvokeWrapper(handler.handler)(ctx);
        }
        ctx.status = 404;
        ctx.set('Content-Type', 'text/html');
        return '<h1>404 Page Not Found</h1>';
      }; <% } %>
    }
  <% }); %>
}

exports.<%=initializer%> = asyncWrapper(async (...args) => {
  if (!inited) {
    await initializeMethod(...args);
  }
});

<% handlers.forEach(function(handlerData){ %>
exports.<%=handlerData.name%> = asyncWrapper(async (...args) => {
  if (!inited) {
    await initializeMethod();
  }

  const handler = getHandler('<%=handlerData.name%>', ...args);
  return runtime.asyncEvent(handler)(...args);
});
<% }); %>
