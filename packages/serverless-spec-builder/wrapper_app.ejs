const { asyncWrapper, start } = require('<%=starter %>');
const SimpleLock  = require('@midwayjs/simple-lock').default;
const lock = new SimpleLock();
const layers = [];
<% layerDeps.forEach(function(layer){ %>
try {
  const <%=layer.name%> = require('<%=layer.path%>');
  layers.push(<%=layer.name%>);
} catch(e) { }
<% }); %>

let runtime;
let inited = false;
let initError;

const initializeMethod = async (initializeContext = {}) => {
  return lock.sureOnce(async () => {
    runtime = await start({
      layers: layers,
      isAppMode: true,
      initContext: initializeContext,
      runtimeConfig: <%-JSON.stringify(runtimeConfig)%>,
    });
  }, 'APP_START_LOCK_KEY');
};
<% if (skipInitializer) { %>
// initializer skip
<% } else { %> 
exports.<%=initializer%> = asyncWrapper(async (...args) => {
  try {
    if (!inited) {
      inited = true;
      await initializeMethod();
    }
  } catch (e) {
    initError = e;
    throw e;
  }
});
<% } %>


<% if (isDefaultFunc) { %>
module.exports = asyncWrapper(async (...args) => {
  try {
    if (!inited) {
      await initializeMethod();
    }
  } catch (e) {
    initError = e;
    throw e;
  }
  if (initError) {
    throw initError;
  }
  return runtime.asyncEvent()(...args);
});
<% } else { %> 
<% handlers.forEach(function(handlerData){ %>
  exports.<%=handlerData.name%> = asyncWrapper(async (...args) => {
    try {
      if (!inited) {
        await initializeMethod();
      }
    } catch (e) {
      initError = e;
      throw e;
    }
    if (initError) {
      throw initError;
    }
    return runtime.asyncEvent()(...args);
  });
<% }); %>
<% } %>
